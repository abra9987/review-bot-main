import logging
import urllib.parse
import os
import openai
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
)
from db import check_user, get_questions, get_prompt, create_tables

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
START_MENU, QUESTION, CONFIRM_REVIEW, EDIT_REVIEW_STATE = range(4)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API
openai.api_key = OPENAI_API_KEY

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ---
def start(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    business_type = check_user(user_id)
    
    if not business_type:
        if update.message:
            update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            update.callback_query.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–∑–Ω–µ—Å-—Ç–∏–ø –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["business_type"] = business_type
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å-—Ç–∏–ø–∞
    questions = get_questions(business_type)
    
    if not questions:
        if update.message:
            update.message.reply_text(f"–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ '{business_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            update.callback_query.message.reply_text(f"–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ '{business_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["questions"] = questions
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_survey")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    if update.message:
        update.message.reply_text(message_text, reply_markup=reply_markup)
    else:
        update.callback_query.message.reply_text(message_text, reply_markup=reply_markup)
    
    return START_MENU

def start_menu_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    if query.data == "start_survey":
        context.user_data["current_question"] = 0
        context.user_data["answers"] = []
        
        questions = context.user_data.get("questions", [])
        if not questions:
            query.edit_message_text(text="–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return ConversationHandler.END
        
        question_text = f"üìù –í–æ–ø—Ä–æ—Å 1/{len(questions)}:\n{questions[0]}"
        query.edit_message_text(text=question_text)
        return QUESTION
    
    elif query.data == "cancel":
        query.edit_message_text(text="–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

# --- –≠—Ç–∞–ø –≤–æ–ø—Ä–æ—Å–æ–≤ ---
def answer_handler(update: Update, context: CallbackContext) -> int:
    current_q = context.user_data.get("current_question", 0)
    answer = update.message.text
    answers = context.user_data.get("answers", [])
    
    if len(answers) > current_q:
        answers[current_q] = answer
    else:
        answers.append(answer)
    
    context.user_data["answers"] = answers

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç" –∏ "–î–∞–ª–µ–µ"
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="edit_answer"),
            InlineKeyboardButton("‚è≠ –î–∞–ª–µ–µ", callback_data="next_question"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(f"–û—Ç–≤–µ—Ç: \"{answer}\"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return QUESTION

def question_callback_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    current_q = context.user_data.get("current_question", 0)
    questions = context.user_data.get("questions", [])
    
    if query.data == "edit_answer":
        query.edit_message_text(
            text=f"üìù –í–æ–ø—Ä–æ—Å {current_q+1}/{len(questions)}:\n{questions[current_q]}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:"
        )
        return QUESTION
    
    elif query.data == "next_question":
        current_q += 1
        context.user_data["current_question"] = current_q
        
        if current_q < len(questions):
            question_text = f"üìù –í–æ–ø—Ä–æ—Å {current_q+1}/{len(questions)}:\n{questions[current_q]}"
            query.edit_message_text(text=question_text)
            return QUESTION
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞
            answers = context.user_data.get("answers", [])
            business_type = context.user_data.get("business_type")
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å-—Ç–∏–ø–∞
            prompt_template = get_prompt(business_type)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç
            answers_text = ""
            for i, ans in enumerate(answers):
                answers_text += f"{i+1}. {ans}\n"
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
            prompt = prompt_template.format(answers_text)
            
            query.edit_message_text(text="–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏."},
                        {"role": "user", "content": prompt},
                    ],
                    temperature=0.7,
                    max_tokens=200,
                )
                generated_review = response.choices[0].message.content.strip()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
                query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return ConversationHandler.END

            context.user_data["generated_review"] = generated_review
            
            # –í—ã–≤–æ–¥–∏–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ —Å –Ω–∞–±–æ—Ä–æ–º –∏–∑ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
                    InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp", callback_data="send_whatsapp"),
                    InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            review_text = f"üéâ –û—Ç–∑—ã–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:\n\"{generated_review}\""
            query.edit_message_text(text=review_text, reply_markup=reply_markup)
            return CONFIRM_REVIEW
    else:
        query.edit_message_text(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥.")
        return ConversationHandler.END

# --- –≠—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ ---
def review_callback_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    if query.data == "edit_review":
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel_edit")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:",
            reply_markup=reply_markup,
        )
        return EDIT_REVIEW_STATE
    
    elif query.data == "send_whatsapp":
        review = context.user_data.get("generated_review", "")
        encoded_text = urllib.parse.quote(review)
        whatsapp_url = f"https://api.whatsapp.com/send?text={encoded_text}"
        
        keyboard = [
            [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å WhatsApp", url=whatsapp_url)],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_from_whatsapp"),
                InlineKeyboardButton("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
                InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ WhatsApp –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )
        return CONFIRM_REVIEW
    
    elif query.data == "back_from_whatsapp":
        generated_review = context.user_data.get("generated_review", "")
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
                InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp", callback_data="send_whatsapp"),
                InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            text=f"üéâ –û—Ç–∑—ã–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:\n\"{generated_review}\"", reply_markup=reply_markup
        )
        return CONFIRM_REVIEW
    
    elif query.data == "restart":
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ, —Å–æ—Ö—Ä–∞–Ω—è—è business_type –∏ questions
        business_type = context.user_data.get("business_type")
        questions = context.user_data.get("questions", [])
        
        context.user_data.clear()
        context.user_data["business_type"] = business_type
        context.user_data["questions"] = questions
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_survey")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text="üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return START_MENU
    
    else:
        query.edit_message_text(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥.")
        return ConversationHandler.END

def edit_review_handler(update: Update, context: CallbackContext) -> int:
    edited_review = update.message.text
    context.user_data["generated_review"] = edited_review
    
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp", callback_data="send_whatsapp"),
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"–í–∞—à –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤:\n\"{edited_review}\"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )
    return CONFIRM_REVIEW

def cancel_edit_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    generated_review = context.user_data.get("generated_review", "")
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review"),
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp", callback_data="send_whatsapp"),
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        text=f"–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n\"{generated_review}\"", reply_markup=reply_markup
    )
    return CONFIRM_REVIEW

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    create_tables()
    
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START_MENU: [CallbackQueryHandler(start_menu_handler, pattern="^(start_survey|cancel)$")],
            QUESTION: [
                MessageHandler(Filters.text & ~Filters.command, answer_handler),
                CallbackQueryHandler(question_callback_handler, pattern="^(edit_answer|next_question)$"),
            ],
            CONFIRM_REVIEW: [
                CallbackQueryHandler(
                    review_callback_handler, pattern="^(edit_review|send_whatsapp|back_from_whatsapp|restart)$"
                ),
            ],
            EDIT_REVIEW_STATE: [
                CallbackQueryHandler(cancel_edit_handler, pattern="^cancel_edit$"),
                MessageHandler(Filters.text & ~Filters.command, edit_review_handler),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()